{
  "permissions": {
    "allow": [
      "WebFetch(domain:supabase.com)",
      "Bash(ping:*)",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "WebFetch(domain:github.com)",
      "Bash(curl:*)",
      "Bash(ssh:*)",
      "Bash(npx n8n-mcp:*)",
      "Bash(npm cache clean:*)",
      "Bash(npm install:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__n8n-mcp__get_database_statistics",
      "mcp__supabase__search_docs",
      "WebFetch(domain:anthropic.com)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "WebFetch(domain:redis.com)",
      "WebFetch(domain:redis.io)",
      "WebFetch(domain:cohere.com)",
      "WebFetch(domain:docs.cohere.com)",
      "mcp__n8n-mcp__list_nodes",
      "mcp__n8n-mcp__search_nodes",
      "WebSearch",
      "WebSearch",
      "WebFetch(domain:openai.com)",
      "mcp__n8n-mcp__list_ai_tools",
      "mcp__n8n-mcp__get_node_info",
      "Bash(n8n-mcp:*)",
      "mcp__n8n_mcp__get_database_statistics",
      "mcp__n8n_mcp__tools_documentation",
      "mcp__n8n_mcp__search_nodes",
      "mcp__n8n_mcp__get_node_info",
      "mcp__n8n_mcp__get_node_as_tool_info",
      "mcp__n8n_mcp__get_node_essentials",
      "mcp__n8n_mcp__validate_node_operation",
      "mcp__n8n_mcp__validate_workflow",
      "Bash(pip install:*)",
      "Bash(export SUPABASE_URL=\"https://duhsahqtmcwcgpavhwrg.supabase.co\")",
      "Bash(cat:*)",
      "Bash(npx mcp-redis:*)",
      "Bash(export REDIS_HOST=\"95.111.252.29\")",
      "Bash(export REDIS_PORT=\"6379\")",
      "Bash(export REDIS_USERNAME=\"default\")",
      "Bash(export REDIS_PWD=\"redis_secure_password_2024_domain\")",
      "Bash(timeout 10s uvx:*)",
      "Bash(export PATH=\"$HOME/.local/bin:$PATH\")",
      "Bash(timeout:*)",
      "mcp__supabase__execute_sql",
      "Bash(redis-cli:*)",
      "mcp__n8n_mcp__get_node_for_task",
      "mcp__supabase__list_tables",
      "mcp__redis__info",
      "mcp__supabase__apply_migration",
      "mcp__redis__create_vector_index_hash",
      "Bash(telnet:*)",
      "mcp__redis__get",
      "mcp__redis__set",
      "mcp__redis__dbsize",
      "mcp__redis__hset",
      "mcp__redis__hgetall",
      "mcp__redis__json_set",
      "mcp__redis__json_get",
      "mcp__redis__scan_all_keys",
      "mcp__supabase__deploy_edge_function",
      "mcp__supabase__list_edge_functions",
      "Bash(export:*)",
      "mcp__n8n_mcp__list_node_templates",
      "mcp__n8n_mcp__search_templates",
      "mcp__n8n_mcp__list_tasks",
      "mcp__n8n_mcp__n8n_list_workflows",
      "mcp__n8n_mcp__n8n_get_workflow_details",
      "mcp__n8n_mcp__n8n_update_partial_workflow",
      "mcp__n8n_mcp__n8n_update_full_workflow",
      "mcp__n8n_mcp__n8n_validate_workflow",
      "mcp__n8n_mcp__list_ai_tools",
      "mcp__n8n_mcp__n8n_get_workflow",
      "mcp__n8n_mcp__get_node_documentation",
      "WebFetch(domain:docs.n8n.io)",
      "mcp__n8n_mcp__n8n_get_workflow_structure",
      "mcp__n8n_mcp__search_node_properties",
      "WebFetch(domain:postgrest.org)",
      "mcp__supabase__get_project_url",
      "Bash(SUPABASE_URL=\"https://bvcgsavjmrvkxcetyeyz.supabase.co\" SUPABASE_SERVICE_ROLE_KEY=\"sb_secret_jRBW51qHz_jIW16vG7B4sg_e0rehWFG\" claude mcp add supabase \"npx @supabase/mcp-server-supabase@latest --project-ref=bvcgsavjmrvkxcetyeyz\")",
      "mcp__supabase__get_anon_key",
      "mcp__n8n__get_database_statistics",
      "mcp__n8n__search_nodes",
      "mcp__n8n__search_templates",
      "mcp__supabase__get_logs",
      "mcp__n8n__get_node_documentation",
      "mcp__n8n__get_node_essentials",
      "mcp__n8n__search_node_properties",
      "mcp__n8n__get_node_info",
      "mcp__n8n_mcp__list_nodes",
      "Bash(npx @supabase/mcp-server-supabase@latest:*)",
      "mcp__n8n_mcp__get_property_dependencies",
      "mcp__n8n_mcp__n8n_create_workflow",
      "mcp__n8n_mcp__n8n_trigger_webhook_workflow",
      "WebFetch(domain:www.anthropic.com)",
      "Bash(touch:*)",
      "Bash(mysql:*)",
      "mcp__redis__get_indexes",
      "mcp__redis__get_index_info",
      "mcp__redis__get_vector_from_hash",
      "mcp__redis__type",
      "mcp__redis__get_indexed_keys_number",
      "mcp__redis__client_list",
      "mcp__redis__delete",
      "mcp__redis__set_vector_in_hash",
      "Bash(python3:*)",
      "mcp__redis__xadd",
      "mcp__redis__zadd",
      "mcp__supabase__list_extensions",
      "mcp__n8n_mcp__n8n_health_check",
      "mcp__n8n_mcp__n8n_list_executions",
      "mcp__supabase__list_migrations",
      "mcp__supabase__get_advisors",
      "mcp__supabase__list_branches",
      "mcp__redis__scan_keys",
      "mcp__n8n_mcp__get_templates_for_task"
    ],
    "additionalDirectories": [
      "/etc/nginx",
      "/etc"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "supabase"
  ],
  "mcpServers": {
    "n8n-mcp": {
      "command": "npx",
      "args": [
        "n8n-mcp"
      ],
      "env": {
        "MCP_MODE": "stdio",
        "LOG_LEVEL": "error",
        "DISABLE_CONSOLE_OUTPUT": "true",
        "N8N_API_URL": "https://awdawdawd.space",
        "N8N_API_KEY": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNGQ3NmE1OS1jNzA5LTQyYTctODIzYy02ZjExODE1MzdiYjYiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzU0NTc5MTUwLCJleHAiOjE3NjIyOTM2MDB9.cxs4P0EdlilGhYgP-6Qj5cRdrsRhJw7NsOxQO5UXDsk"
      },
      "alwaysAllow": [
        "tools_documentation",
        "n8n_create_workflow",
        "n8n_get_workflow_details",
        "n8n_validate_workflow",
        "n8n_update_partial_workflow",
        "n8n_update_full_workflow",
        "list_nodes",
        "get_node_info",
        "get_node_documentation",
        "n8n_health_check",
        "n8n_diagnostic",
        "get_node_essentials",
        "n8n_trigger_webhook_workflow",
        "n8n_list_workflows",
        "n8n_list_available_tools",
        "search_nodes",
        "n8n_get_workflow_structure",
        "n8n_list_executions",
        "n8n_delete_workflow",
        "n8n_get_workflow",
        "validate_node_operation",
        "validate_workflow"
      ]
    },
    "context7": {
      "command": "npx",
      "args": [
        "-y",
        "@upstash/context7-mcp"
      ],
      "env": {
        "DEFAULT_MINIMUM_TOKENS": ""
      },
      "alwaysAllow": [
        "resolve-library-id",
        "get-library-docs"
      ]
    },
    "sequentialthinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "alwaysAllow": [
        "sequentialthinking"
      ]
    }
  }
}